//
// GameViewModel.swift

import Foundation

class GameViewModel: ObservableObject {
    // MARK: - Types
    
    /// –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    enum Direction {
        case up, down, left, right
    }
    
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –ø–æ–¥–∫–æ–≤—ã
    struct ThrowResult {
        /// –ù–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –ø–æ–¥–∫–æ–≤
        let newPositions: [(x: Int, y: Int)]
        /// –§–ª–∞–≥ —É—Ö–æ–¥–∞ –ø–æ–¥–∫–æ–≤—ã –≤ –∞—É—Ç
        let isOut: Bool
        /// –ò–Ω–¥–µ–∫—Å—ã –ø–æ–¥–∫–æ–≤ –Ω–∞ —Å—Ç–æ–ª–±–∞—Ö
        let placedHorseshoes: Set<Int>
    }
    
    private enum MovementDirection {
        case horizontal(dx: Int)
        case vertical(dy: Int)
    }
    
    // MARK: - Public Properties
    
    /// –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    let gridSize: Int
    
    /// –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞
    @Published private(set) var playerPosition: (x: Int, y: Int)
    
    /// –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–¥–∫–æ–≤
    @Published private(set) var horseshoePositions: [(x: Int, y: Int)]
    
    /// –§–ª–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–æ–¥–∫–æ–≤–∞ –≤ –∞—É—Ç–µ
    @Published private(set) var isGameLost = false
    
    /// –ü–æ–∑–∏—Ü–∏–∏ —Å—Ç–æ–ª–±–æ–≤
    let pillarPositions: [(x: Int, y: Int)]
    
    /// –ü–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
    let obstaclePositions: [(x: Int, y: Int)]
    
    // MARK: - Private Properties
    
    /// –ò–Ω–¥–µ–∫—Å—ã –ø–æ–¥–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ —Å—Ç–æ–ª–±–∞—Ö
    private var placedHorseshoeIndices: Set<Int> = []
    
    // MARK: - Initialization
    
    init(gridSize: Int = 6,
         playerStart: (x: Int, y: Int) = (0, 0),
         horseshoes: [(x: Int, y: Int)] = [(2, 2), (3, 4)],
         pillars: [(x: Int, y: Int)] = [(5, 2)],
         obstacles: [(x: Int, y: Int)] = [(4, 1), (5, 4)]) {
        self.gridSize = gridSize
        self.playerPosition = playerStart
        self.horseshoePositions = horseshoes
        self.pillarPositions = pillars
        self.obstaclePositions = obstacles
    }
    
    // MARK: - Public Methods
    
    /// –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    func movePlayer(direction: Direction) {
        var newPosition = playerPosition
        
        switch direction {
        case .up:    newPosition.y += 1
        case .down:  newPosition.y -= 1
        case .left:  newPosition.x -= 1
        case .right: newPosition.x += 1
        }
        
        guard isValidPosition(newPosition) && !hasObstacle(at: newPosition) else { return }
        playerPosition = newPosition
    }
    
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –±—Ä–æ—Å–æ–∫ –ø–æ–¥–∫–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∏–≥—Ä–æ–∫–∞
    func performThrow() -> ThrowResult {
        let initialPositions = horseshoePositions
        var isOutThisThrow = false
        var currentPlacedIndices = placedHorseshoeIndices
        
        for i in 0..<horseshoePositions.count where !placedHorseshoeIndices.contains(i) {
            let horseshoePos = horseshoePositions[i]
            let initialPos = initialPositions[i]
            
            guard let direction = getMovementDirection(from: horseshoePos) else { continue }
            
            let newPosition = calculateNewPosition(from: horseshoePos, in: direction)
            horseshoePositions[i] = newPosition
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å—Ç–æ–ª–±
            if isOnPillar(position: newPosition) {
                currentPlacedIndices.insert(i)
                print("üéØ –ü–æ–¥–∫–æ–≤–∞ \(i) –ø–æ–ø–∞–ª–∞ –Ω–∞ —Å—Ç–æ–ª–± –≤ –ø–æ–∑–∏—Ü–∏–∏ \(newPosition)")
                print("üìä –í—Å–µ–≥–æ –ø–æ–¥–∫–æ–≤ –Ω–∞ —Å—Ç–æ–ª–±–∞—Ö: \(currentPlacedIndices.count) –∏–∑ \(pillarPositions.count) –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö")
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç
            if !isEdge(initialPos) && isEdge(newPosition) && !isOnPillar(position: newPosition) {
                isOutThisThrow = true
                isGameLost = true
                print("‚ùå –ü–æ–¥–∫–æ–≤–∞ \(i) —É—à–ª–∞ –≤ –∞—É—Ç! –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: \(initialPos), –∫–æ–Ω–µ—á–Ω–∞—è: \(newPosition)")
            }
        }
        
        placedHorseshoeIndices = currentPlacedIndices
        
        if isVictory() {
            print("üèÜ –ü–û–ë–ï–î–ê! –í—Å–µ —Å—Ç–æ–ª–±—ã (\(pillarPositions.count)) –∑–∞–Ω—è—Ç—ã –ø–æ–¥–∫–æ–≤–∞–º–∏")
        }
        
        return ThrowResult(
            newPositions: horseshoePositions,
            isOut: isOutThisThrow,
            placedHorseshoes: currentPlacedIndices
        )
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ –ø–æ–±–µ–¥–∞
    func isVictory() -> Bool {
        pillarPositions.allSatisfy { pillar in
            placedHorseshoeIndices.contains { index in
                let pos = horseshoePositions[index]
                return pos.x == pillar.x && pos.y == pillar.y
            }
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–¥–∫–æ–≤–∞ –Ω–∞ —Å—Ç–æ–ª–±–µ
    func isHorseshoePlaced(at index: Int) -> Bool {
        placedHorseshoeIndices.contains(index)
    }
    
    /// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    func resetGame() {
        isGameLost = false
        placedHorseshoeIndices.removeAll()
        // –ó–¥–µ—Å—å —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–±—Ä–æ—Å –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
    }
    
    // MARK: - Private Methods
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–ª—è
    private func isValidPosition(_ pos: (x: Int, y: Int)) -> Bool {
        pos.x >= 0 && pos.x < gridSize && pos.y >= 0 && pos.y < gridSize
    }
    
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ–¥–∫–æ–≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–≥—Ä–æ–∫–∞
    private func getMovementDirection(from position: (x: Int, y: Int)) -> MovementDirection? {
        if playerPosition.x == position.x {
            let dy = playerPosition.y > position.y ? -1 : 1
            return .vertical(dy: dy)
        } else if playerPosition.y == position.y {
            let dx = playerPosition.x > position.x ? -1 : 1
            return .horizontal(dx: dx)
        }
        return nil
    }
    
    /// –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ–¥–∫–æ–≤—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏ –≥—Ä–∞–Ω–∏—Ü
    private func calculateNewPosition(from start: (x: Int, y: Int),
                                    in direction: MovementDirection) -> (x: Int, y: Int) {
        var current = start
        
        switch direction {
        case .horizontal(let dx):
            while true {
                let nextX = current.x + dx
                guard isValidPosition((nextX, current.y)) else { break }
                guard !hasObstacle(at: (nextX, current.y)) else { break }
                
                current.x = nextX
                if isOnPillar(position: current) { break }
            }
            
        case .vertical(let dy):
            while true {
                let nextY = current.y + dy
                guard isValidPosition((current.x, nextY)) else { break }
                guard !hasObstacle(at: (current.x, nextY)) else { break }
                
                current.y = nextY
                if isOnPillar(position: current) { break }
            }
        }
        
        return current
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    private func hasObstacle(at position: (x: Int, y: Int)) -> Bool {
        obstaclePositions.contains { $0.x == position.x && $0.y == position.y }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ —Å—Ç–æ–ª–±–µ
    private func isOnPillar(position: (x: Int, y: Int)) -> Bool {
        pillarPositions.contains { $0.x == position.x && $0.y == position.y }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –∫—Ä–∞—é –ø–æ–ª—è
    private func isEdge(_ pos: (x: Int, y: Int)) -> Bool {
        pos.x == 0 || pos.x == gridSize - 1 || pos.y == 0 || pos.y == gridSize - 1
    }
}
